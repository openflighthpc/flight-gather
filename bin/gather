#!/usr/bin/env ruby

#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of flight-gather.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# flight-gather is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with flight-gather. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on flight-gather, please visit:
# https://github.com/openflighthpc/flight-gather
#==============================================================================

module FlightGather
  def self.root
    File.expand_path('..', __dir__)
  end
  
  def self.filePath
    File.open(File.join(root, "etc/config.yaml")) { |config| File.expand_path(YAML.load_file(config)["output"]) }
  end
end

lib_dir = File.expand_path(File.join(__FILE__, '../../lib'))
helpers_dir = File.expand_path(File.join(__FILE__, '../../helpers'))
$LOAD_PATH.unshift(lib_dir, helpers_dir)

require "physical"
require "logical"
require "between"

require "yaml"
require "active_support"
require "active_support/core_ext/hash"
require "pp"
require "rubygems"
require "commander"

module FlightGather
  extend Commander::Delegates
  
  program :name, "gather"
  program :version, "0.0.5"
  program :description, "Tool for gathering system information"
  default_command :help

  command "collect" do |c|
    c.syntax = "collect [options]"
    c.description = "Gathers physical and/or logical system information"
    c.option "--primary PRIMARYGROUPS", String, "Primary group for the node"
    c.option "--groups x,y,z", Array, "Comma-separated list of secondary groups for the node"
    c.option "--type TYPE", String, "Type of check to run (physical or logical), if not provided then both types are collected"
    
    c.action do |args, options|
      if options.type == nil
        options.physical = true
        options.logical = true
      else
        options.physical = options.type.downcase == "physical"
        options.logical = options.type.downcase == "logical"
      end
      
      if !(options.physical || options.logical) then 
        puts "Invalid data type, must be 'physical' or 'logical'"
        next
      end
      
      puts "Beginning data gather..."

      data = { primaryGroup: options.primary,
               secondaryGroups: options.groups
             }

      if options.physical
        puts "Gathering physical data..."
        data = data.deep_merge(physical_data)
      end

      if options.logical
        puts "Gathering logical data..."
        data = data.deep_merge(logical_data)
      end
      File.open(self.filePath, "w") { |file| file.write(data.to_yaml) }
      puts "Data gathered and written to " + self.filePath
    end
  end
  
  command "show" do |c|
    c.syntax = "show"
    c.description = "Displays collected system information"
    
    c.action do |args, options|
      begin
        File.open(self.filePath) { |file| puts file.read }
      rescue Errno::ENOENT
        puts "System info not yet gathered, try running 'collect' first"
      end
    end
  end
  
  command "modify" do |c|
    c.syntax = "modify [options]"
    c.description = "Reset primary and/or secondary group for the node"
    c.option "--primary PRIMARYGROUPS", String, "Primary group for the node"
    c.option "--groups x,y,z", Array, "Comma-separated list of secondary groups for the node"
    
    c.action do |args, options|
      begin
        File.open(self.filePath) { |file|
          data = YAML.load_file(file)
          data[:primaryGroup] = options.primary
          data[:secondaryGroups] = options.groups
          File.open(self.filePath, "w") { |fileNew| fileNew.write(data.to_yaml) }
          puts "Field(s) modified"
        }
      rescue Errno::ENOENT
        puts "System info not yet gathered, try running 'collect' first"
      end
    end
  end
end

FlightGather.run!
