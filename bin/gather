module FlightGather
  def self.root
    File.expand_path('..', __dir__)
  end
  
  def self.filePath
    File.open(File.join(root, "etc/config.yaml")) { |config| YAML.load_file(config)["output"] }
  end
end

$LOAD_PATH.unshift(File.join(FlightGather.root, "lib"), File.join(FlightGather.root, "helpers"))

require "physical"
require "logical"
require "between"

require "yaml"
require "active_support"
require "active_support/core_ext/hash"
require "pp"
require "rubygems"
require "commander"

module FlightGather
  extend Commander::Delegates
  
  program :name, "gather"
  program :version, "1.0.0"
  program :description, "Tool for gathering system information"
  default_command :help

  command "collect" do |c|
    c.syntax = "collect [options]"
    c.description = "Gathers physical and/or logical system information"
    c.option "--primary PRIMARYGROUPS", String, "Primary group for the node"
    c.option "--groups x,y,z", Array, "Comma-separated list of secondary groups for the node"
    c.option "--type x,y,z", Array, "Type of check to run (physical or logical), if not provided then both types are collected"
    
    c.action do |args, options|
      options.default type: ["physical","logical"]
      options.physical = options.type.include? "physical"
      options.logical = options.type.include? "logical"
      
      puts "Beginning data gather..."

      data = { primaryGroup: options.primary,
               secondaryGroups: options.secondary
             }

      if options.type.include? "physical"
        puts "Gathering physical data..."
        data = data.deep_merge(physical_data)
      end

      if options.type.include? "logical"
        puts "Gathering logical data..."
        data = data.deep_merge(logical_data)
      end
      File.open(self.filePath, "w") { |file| file.write(data.to_yaml) }
      puts "Data gathered and written to " + self.filePath
    end
  end
  
  command "show" do |c|
    c.syntax = "show"
    c.description = "Displays collected system information"
    
    c.action do |args, options|
      begin
        File.open(self.filePath) { |file| puts file.read }
      rescue Errno::ENOENT
        puts "System info not yet gathered, try running 'collect' first"
      end
    end
  end
  
  command "modify" do |c|
    c.syntax = "modify [options]"
    c.description = "Reset primary and/or secondary group for the node"
    c.option "--primary PRIMARYGROUPS", String, "Primary group for the node"
    c.option "--groups x,y,z", Array, "Comma-separated list of secondary groups for the node"
    
    c.action do |args, options|
      begin
        File.open(File.join(root, "lib/buffer.yml")) { |bufferFile|
          data = YAML.load_file(bufferFile)
          data[:primaryGroup] = options.primary
          data[:secondaryGroups] = options.secondary
          File.open(File.join(root, "lib/buffer.yml"), "w") { |file| file.write(data.to_yaml) }
          puts "Field(s) modified"
        }
      rescue Errno::ENOENT
        puts "System info not yet gathered, try running 'collect' first"
      end
    end
  end
end

FlightGather.run!
